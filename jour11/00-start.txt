hier j'ai essayé de vous montrer comment trier un tableau via la technique du drag and drop 

=> l'idée est de pouvoir reclasser une liste de ligne du tableau via la souris 

=> un site internet permet de créer des sites internet via 
le système de drag and drop => wix.com 


trier une liste en drag and drop 

const data = [ 
    {id : 1 , nom : "dépense 1" , montant : -300}, key = 0
    {id : 2 , nom : "dépense 2" , montant : -50}, key= 1
    {id : 3 , nom : "recette 1" , montant : 400 }, key = 2
]


const elementADeplacer = data.splice(1,1)[0] // supprimé l'élément avec l'id 2
// déplacer élément à déplacer 
data.splice(2, 0 , elementADeplacer) 

Javascript de base et React 
await async / programmation asynchrone 

-------

créer un nouveau projet react 
useRef () => présentation 
mise en ligne => CRUD avec Firebase 
multicontext
jsonwebtoken 
test unitaire (demain)

---------------------

programmation asynchrone ??? 

programmation synchrone ?? 
=> le fait que le code que vous avez écrit s'exécute dans cette ordre 

const a = 2 ;
const b = 3 ;
console.log(a+b) ; 

// le code s'exécute dans l'ordre dans lequel je l'ai écrit 


// donc la programmation asynchrone => le code s'exécute dans un ordre DIFFERENT que celui dans lequel j'ai écrit 


let a = 2 ;
setTimeout( function(){ 
    a = a + 2
})
console.log(a); 


// cas pratique : 
créer le fichier 05-exo.html
ajouter une balise div 
ajouter une balise script 
vous allez réaliser une requête ajax vers l'API suivante : 
https://dummyjson.com/users => [{},{} ... ]

et injection dans la balise div le html suivant :
<article>
    <h2>firstName lastName</h2>
    <ul>
        <li>email</li>
        <li>phone</li>
        <li>bloodGroup</li>
    </ul>
</article> 
vous devez utiliser await async pour attendre que la requête ajax soit finalisée avant l'injection dans le html 

document.addEventListener("DOMContentLoaded", function(){})



